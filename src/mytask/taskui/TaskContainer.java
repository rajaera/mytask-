/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mytask.taskui;

import mytask.entity.TaskEntity;
import mytask.taskdb.TaskDBClient;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Eranga
 */
public class TaskContainer extends javax.swing.JFrame {

    private TaskEntity currentTask;
    private TaskEntity prevTask;

    /**
     * Creates new form TaskContainer
     */
    public TaskContainer() {
        initComponents();
        currentTask = new TaskEntity();       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My Task++");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Enter your task here!");
        jScrollPane1.setViewportView(jTextArea1);

        jCheckBox1.setText("Task Done");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Save Task");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (saveForm() && formValidate()) {
            saveForm();
            //sending data to task DB
            TaskDBClient taskDbClient = new TaskDBClient();
            if (taskDbClient.postTask(currentTask)) {
                jLabel2.setText("Saved as " + Long.toString(currentTask.id));
                //save current task as prev task
                prevTask = currentTask;
                //create new instance for current task
                currentTask = new TaskEntity();
            } else {
                jLabel2.setText("Error!");
            }
        } else {
            jLabel2.setText("Invalid!");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    protected boolean saveForm() {
        currentTask.task = jTextArea1.getText();
        currentTask.isDone = jCheckBox1.isSelected();

        //set dates
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date taskDate = new Date();

        currentTask.taskCreatedAt = formatter.format(taskDate);
        if (currentTask.isDone) {
            currentTask.taskCompletedAt = formatter.format(taskDate);
        }

        currentTask.createdBy = 1;// temporary ID

        return true;
    }

    protected boolean formValidate() {

        if (currentTask.task != null
                && !currentTask.task.equals("")
                && !currentTask.equals(prevTask)) {
            return true;
        }

        return false;
    }

    protected String emojiToString(String emoji) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < emoji.length(); i++) {
            if (Character.isSurrogate(emoji.charAt(i))) {
                Integer res = Character.codePointAt(emoji, i);
                i++;
                sb.append("U+" + Integer.toHexString(res).toUpperCase());
            } else {
                sb.append(emoji.charAt(i));
            }
        }
        
        return sb.toString();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
